#!/usr/bin/env node

var http = require('http');
var server = require('../server');

// Get port from .env file
var port = normalizePort(process.env.PORT);
server.set('port', port);

// Create HTTP serverInstance
var serverInstance = http.createServer(server);

// Listen on provided port, on all network interfaces
serverInstance.listen(port);


//////////////
// Handlers //
//////////////

// Error and success handlers
serverInstance.on('error', onError);
serverInstance.on('listening', onListening);

// Catch exeptions & keep our thread going
process.on('uncaughtException', function(err) {
    process.stdout.write('Caught exception: ' + err + '\n');
});


/////////////
// Helpers //
/////////////

//Normalize a port into a number, string, or false
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Callback for our HTTP serverInstance "error" event
function onError(error) {
    var bind;

    // throw an error if we are not ready to listen
    if (error.syscall !== 'listen') {
        process.stderr(error);
        throw error;
    } else {
        bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    }

    // Handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            process.stdout.write(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            process.stdout.write(bind + ' is already in use');
            process.exit(1);
            break;
            // case 'ELIFECYCLE':
            // process.stdout.write('There is a problem when spawning the /bin/www script' + bind);
            //   process.exit(1);
            //   break;
        default:
            throw error;
    }
}

// Callback for our HTTP serverInstance "listening" event
function onListening() {
    var addr = serverInstance.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    if (process.pid) {
        process.stdout.write('\n' +
            '######FOOD########' + '\n' +
            '######SESSIONS####' + '\n' +
            'PID: ' + process.pid + '\n' +
            '\n'
        );
        process.stdout.write('Listening on ' + bind + ', press ctrl+c to exit' + '\n');
    }
}